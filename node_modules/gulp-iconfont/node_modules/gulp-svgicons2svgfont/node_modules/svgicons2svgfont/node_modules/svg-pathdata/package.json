{
  "name": "svg-pathdata",
  "version": "0.0.6",
  "description": "SVG Path Datas parsing",
  "main": "src/SVGPathData.js",
  "scripts": {
    "test": "mocha tests/*.mocha.js",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- tests/*.mocha.js -R spec -t 5000 && coveralls < ./coverage/lcov.info && rimraf ./coverage",
    "cover": "istanbul cover --report html ./node_modules/mocha/bin/_mocha -- tests/*.mocha.js -R spec -t 5000"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nfroidure/SVGPathData.git"
  },
  "keywords": [
    "svg",
    "path",
    "data",
    "parser",
    "encoder",
    "transformer",
    "reader",
    "writer",
    "stream",
    "browserify"
  ],
  "author": {
    "name": "Nicolas Froidure"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nfroidure/SVGPathData/issues"
  },
  "engines": {
    "node": "0.10.*"
  },
  "dependencies": {
    "readable-stream": "~1.0.26-3"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "mocha-lcov-reporter": "0.0.1",
    "coveralls": "~2.10.0",
    "istanbul": "~0.2.6",
    "karma": "~0.12.1",
    "karma-chrome-launcher": "~0.1.2",
    "karma-firefox-launcher": "~0.1.3",
    "karma-opera-launcher": "~0.1.0",
    "grunt": "~0.4.4",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-contrib-jshint": "~0.9.2",
    "grunt-browserify": "~2.0.1",
    "grunt-parallel": "~0.3.1",
    "grunt-karma": "~0.8.2",
    "karma-mocha": "~0.1.3",
    "karma-chai": "0.1.0",
    "karma-sinon": "1.0.3",
    "matchdep": "~0.3.0",
    "chai": "~1.9.1",
    "rimraf": "~2.2.6"
  },
  "readme": "# SVGPathData\n> Manipulating SVG path datas (path[d] attribute content) simply and efficiently.\n\n[![NPM version](https://badge.fury.io/js/svg-pathdata.png)](https://npmjs.org/package/svg-pathdata) [![Build status](https://secure.travis-ci.org/nfroidure/SVGPathData.png)](https://travis-ci.org/nfroidure/SVGPathData) [![Dependency Status](https://david-dm.org/nfroidure/SVGPathData.png)](https://david-dm.org/nfroidure/SVGPathData) [![devDependency Status](https://david-dm.org/nfroidure/SVGPathData/dev-status.png)](https://david-dm.org/nfroidure/SVGPathData#info=devDependencies) [![Coverage Status](https://coveralls.io/repos/nfroidure/SVGPathData/badge.png?branch=master)](https://coveralls.io/r/nfroidure/SVGPathData?branch=master)\n\n## Including the library\nThis library is fully node based (based on current stream implementation) but\n you can also use it in modern browsers with the\n [browserified build](https://github.com/nfroidure/SVGPathData/blob/master/dist/SVGPathData.js)\n or in your own build using Browserify.\n\n## Reading PathDatas\n```js\nvar pathData = new SVGPathData ('\\\n  M 10 10 \\\n  H 60 \\\n  V 60 \\\n  L 10 60 \\\n  Z \\\n');\n\nconsole.log(pathData.commands);\n\n// {\"commands\":[{\n//    \"type\": SVGPathData.MOVE_TO,\n//    \"relative\": false,\n//    \"x\": 10, \"y\": 10\n//  },{\n//    \"type\": SVGPathData.HORIZ_LINE_TO,\n//    \"relative\": false,\n//    \"x\": 60\n//  },{\n//    \"type\": SVGPathData.VERT_LINE_TO,\n//    \"relative\":false,\n//    \"y\": 60\n//  },{\n//    \"type\": SVGPathData.LINE_TO,\n//    \"relative\": false,\n//    \"x\": 10,\n//    \"y\": 60\n//  },{\n//    \"type\": SVGPathData.CLOSE_PATH\n//  }\n// ]}\n```\n\n## Reading streamed PathDatas\n```js\nvar parser = new SVGPathData.Parser();\nparser.on('data', function(cmd) {\n  console.log(cmd);\n});\n\nparser.write('   ');\nparser.write('M 10');\nparser.write(' 10');\n\n// {\n//   \"type\": SVGPathData.MOVE_TO,\n//   \"relative\": false,\n//   \"x\": 10, \"y\": 10\n// }\n\n\nparser.write('H 60');\n\n// {\n//   \"type\": SVGPathData.HORIZ_LINE_TO,\n//   \"relative\": false,\n//   \"x\": 60\n// }\n\n\nparser.write('V');\nparser.write('60');\n\n// {\n//   \"type\": SVGPathData.VERT_LINE_TO,\n//   \"relative\": false,\n//   \"y\": 60\n// }\n\n\nparser.write('L 10 60 \\\n  Z');\n\n// {\n//   \"type\": SVGPathData.LINE_TO,\n//   \"relative\": false,\n//   \"x\": 10,\n//   \"y\": 60\n// }\n  \n// {\n//   \"type\": SVGPathData.CLOSE_PATH\n// }\n\nparser.end();\n```\n\n## Outputting PathDatas\n```js\nvar pathData = new SVGPathData ('\\\n  M 10 10 \\\n  H 60 \\\n  V 60 \\\n  L 10 60 \\\n  Z \\\n');\n\nconsole.log(pathData.encode());\n// \"M10 10H60V60L10 60Z\"\n```\n\n## Streaming PathDatas out\n```js\nvar encoder = new SVGPathData.Encoder();\nencoder.setEncoding('utf8');\n\nencode.on('data', function(str) {\n  console.log(str);\n});\n\nencoder.write({\n   \"type\": SVGPathData.MOVE_TO,\n   \"relative\": false,\n   \"x\": 10, \"y\": 10\n });\n// \"M10 10\"\n\nencoder.write({\n   \"type\": SVGPathData.HORIZ_LINE_TO,\n   \"relative\": false,\n   \"x\": 60\n});\n// \"H60\"\n\nencoder.write({\n   \"type\": SVGPathData.VERT_LINE_TO,\n   \"relative\": false,\n   \"y\": 60\n});\n// \"V60\"\n\nencoder.write({\n   \"type\": SVGPathData.LINE_TO,\n   \"relative\": false,\n   \"x\": 10,\n   \"y\": 60\n});\n// \"L10 60\"\n  \nencoder.write({\"type\": SVGPathData.CLOSE_PATH});\n// \"Z\"\n\nencode.end();\n```\n\n## Transforming PathDatas\nThis library was made to live decoding/transform/encoding SVG PathDatas. Here is\n [an example of that kind of use](https://github.com/nfroidure/svgicons2svgfont/blob/aa6df0211419e9d61c417c63bcc353f0cb2ea0c8/src/index.js#L192).\n\n### The synchronous way\n```js\nconsole.log(\n  new SVGPathData ('\\\n   m 10,10 \\\n   h 60 \\\n   v 60 \\\n   l 10,60 \\\n   z'\n  )\n  .toAbs()\n  .encode()\n);\n// \"M10,10 H70 V70 L80,130 Z\"\n```\n\n### The streaming/asynchronous way\nHere, we take SVGPathDatas from stdin and output it transformed to stdout.\n```js\n// stdin to parser\nprocess.stdin.pipe(new SVGPathData.Parser())\n// parser to transformer to absolute\n  .pipe(new SVGPathData.Transformer(SVGPathData.Transformer.TO_ABS))\n// transformer to encoder\n  .pipe(new SVGPathData.Encoder())\n// encoder to stdout\n  .pipe(process.stdout);\n```\n\n## Supported transformations\nYou can find every supported transformations in\n [this file](https://github.com/nfroidure/SVGPathData/blob/master/src/SVGPathDataTransformer.js#L47)\n of course, you can create yours by using this format:\n```js\nfunction SET_X_TO(xValue) {\n  xValue = xValue || 10; // Provide default values or throw errors for options\n  function(command) {\n    command.x = xValue; // transform command objects and return them\n    return command;\n  };\n};\n\n// Synchronous usage\nnew SVGPathData('...')\n  .transform(SET_X_TO, 25)\n  .encode();\n\n// Streaming usage\nprocess.stdin.pipe(new SVGPathData.Parser())\n  .pipe(new SVGPathData.Transformer(SET_X_TO, 25))\n  .pipe(new SVGPathData.Encoder())\n  .pipe(process.stdout);\n```\n\n## Stats\n\n[![NPM](https://nodei.co/npm/svg-pathdata.png?downloads=true&stars=true)](https://nodei.co/npm/svg-pathdata/)\n[![NPM](https://nodei.co/npm-dl/svg-pathdata.png)](https://nodei.co/npm/svg-pathdata/)\n\n## Contributing\nClone this project, run:\n```sh\nnpm install; grunt test&\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nfroidure/SVGPathData",
  "_id": "svg-pathdata@0.0.6",
  "_from": "svg-pathdata@0.0.6"
}
