{
  "name": "svgpath",
  "version": "1.0.6",
  "description": "SVG path low level operations toolkit",
  "keywords": [
    "svg",
    "path",
    "transform",
    "scale",
    "translate"
  ],
  "homepage": "https://github.com/fontello/svgpath",
  "bugs": {
    "url": "https://github.com/fontello/svgpath/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/fontello/svgpath/raw/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/fontello/svgpath.git"
  },
  "main": "./lib/svgpath.js",
  "devDependencies": {
    "mocha": "*",
    "jshint": "*",
    "benchmark": "*",
    "ansi": "*"
  },
  "readme": "svgpath\n=======\n\n[![Build Status](https://travis-ci.org/fontello/svg2ttf.svg?branch=master)](https://travis-ci.org/fontello/svg2ttf)\n[![NPM version](https://img.shields.io/npm/v/svgpath.svg)](https://www.npmjs.org/package/svgpath)\n\nLow level toolkit for svg paths transformations. Sometime you can't use\n`transform` attributes and have to apply changes to svg paths directly.\nThen this package is for you :) !\n\nNote, this package works with `paths`, not with svg xml sources.\n\nInstall\n-------\n\n```\nnpm install svgpath\n```\n\n\nExample\n-------\n\n```\nvar SvgPath = require('svgpath');\n\nvar transformedPath = new SvgPath(__your_path__)\n  .scale(0.5)\n  .translate(100,200)\n  .abs()\n  .round(1) // Here the real rounding happens\n  .rel()\n  .round(1) // Fix js floating point error/garbage after rel()\n  .toString()\n```\n\n\nAPI\n---\n\nAll methods are chainable (return self).\n\n### SvgPath(path) -> self\n\nConstructor. Create SvgPath instance with chainable methods.\n\n### .abs() -> self\n\nConverts all path commands to absolute.\n\n### .rel() -> self\n\nConverts all path commands to relative. Useful to reduce output size.\n\n### .scale(sx [, sy]) -> self\n\nRescale path (the same as SVG `scale` transformation).\n\n### .translate(x [, y]) -> self\n\nRescale path (the same as SVG `scale` transformation)\n\n### .transform(string) -> self\n\nAny SVG transform or their combination. For example `rotate(90) scale(2,3)`.\nThe same format, as described in standard.\n\n### .unshort() -> self\n\nConverts smooth curves (`T`, `t`, `S`, `s`) with missed control point to\ngeneric curves.\n\n### .toString() -> string\n\nReturns final path string.\n\n### .round(precision) -> self\n\nRound all coordinated to given decimal precision. By default round to integer.\nUseful to reduce resulting string size.\n\n(!) NOTE:\n\n1. You should apply `abs()` first, because relative coordinate summarize\n   precision errors.\n2. After .rel() call, your rounded values can be littered with tail like\n   `0.000000000000023`. So, you have to call .round(x) again. See example above.\n\n### .iterate(function) -> self\n\nApply iterator to all path segments. Each iterator receives `segment`, `index`,\n`x`, `y` params. Where (x, y) - absolute coordinates of segment start point.\n\nAlso, you iterator can return array of new segments, that should replace\ncurrent one. On empty array current segment will be deleted.\n\n\nAuthors\n-------\n\n* Sergey Batishchev - [@snb2013](https://github.com/snb2013)\n* Vitaly Puzrin - [@puzrin](https://github.com/puzrin)\n\n\nLicense\n-------\n\nCopyright (c) 2013 [Vitaly Puzrin](https://github.com/puzrin).\nReleased under the MIT license. See\n[LICENSE](https://github.com/nodeca/svg2ttf/blob/master/LICENSE) for details.\n\n",
  "readmeFilename": "README.md",
  "_id": "svgpath@1.0.6",
  "_from": "svgpath@~ 1.0.0"
}
